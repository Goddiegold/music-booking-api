// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum user_role {
  admin           @map("admin")
  artist          @map("artist")
  event_organizer @map("event_organizer")
}

enum booking_status {
  pending  @map("pending")
  accepted @map("accepted")
  rejected @map("rejected")
}

model User {
  userId        String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  username      String?
  avatar        String?
  password      String?
  phone         String?
  otl           String?
  otlDuration   DateTime?
  createdAt     DateTime?  @default(now())
  lastLoginAt   DateTime?
  updatedAt     DateTime?  @updatedAt
  authProviders String[]   @default([])
  role          user_role?
  bookings      Booking[]
  events        Event[]
}

model Event {
  eventId String @id @default(auto()) @map("_id") @db.ObjectId
  type    String
  amount  Float

  organizerId String @db.ObjectId
  organizer   User   @relation(fields: [organizerId], references: [userId])

  bookings Booking[] // One event can have multiple bookings

  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())
}

model Booking {
  bookingId String @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String @db.ObjectId
  event     Event  @relation(fields: [eventId], references: [eventId])

  artistId String @db.ObjectId
  artist   User   @relation(fields: [artistId], references: [userId])

  status    booking_status @default(pending)
  createdAt DateTime?      @default(now())
  updatedAt DateTime?      @updatedAt
}
